# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/aws-ecr
    aws-ecr: circleci/aws-ecr@6.15.2
version: 2.1
jobs:
  build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest
      - image: circleci/postgres:9.6-alpine
      - image: circleci/python:3.6.2-stretch-browsers
        

        environment:
          POSTGRES_USER: POSTGRES_USER
          POSTGRES_PASSWORD: POSTGRES_PWD
          POSTGRES_DB: DB_NAME
          POSTGRES_PORT: DB_PORT
          POSTGRES_HOST: DB_HOST
          TEST_DATABASE_URL: postgresql://root@localhost/circle_test


    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      - run: whoami     
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "CREATE TABLE testdata (name char(25));"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "INSERT INTO testdata VALUES ('Apple'), ('Microsoft'), ('Servian');"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "SELECT * from testdata"
          
  deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            mkdir output
            go build -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -v -o TechChallengeApp .
            
            cp TechChallengeApp dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -v -o TechChallengeApp .
            
            cp TechChallengeApp dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -v -o TechChallengeApp.exe .
            
            cp TechChallengeApp.exe dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -v -o TechChallengeApp.exe .
            
            cp TechChallengeApp.exe dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      # - run:
      #     name: Release if new version
      #     command: |
      #       export version=$(cat versionfile)
      #       echo $version
      #       export tagvalue=$(git tag | grep ${version})
      #       export prerelease=$(echo ${version} | grep 'pre-release')
      #       if [ -z "${tagvalue}" ]; then
      #         go get github.com/tcnksm/ghr

      #         if [ -z "${prerelease}" ]; then
      #           echo "No pre-release in version, creating release"
      #           ghr -u servian ${version} output
      #         else
      #           echo "Found pre-release in version, creating pre-release"
      #           ghr -u servian -prerelease ${version} output
      #         fi
      #       fi

      - store_artifacts:
          path: output
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - deploy
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          dockerfile: Dockerfile
          create-repo: true
          path: .
          region: AWS_REGION
          repo: techchallengeapp
          skip-when-tags-exist: false
          tag: 'latest,v0.1.${CIRCLE_BUILD_NUM}'
      # - aws-ecr/build-and-push-image:
      #     repo: "techchallengeapp"
      #     tag: "latest,v0.1.${CIRCLE_BUILD_NUM}"
      #     dockerfile: Dockerfile
      #     path: .
      #     requires:
      #       - deploy
        
        # Envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, AWS_ECR_ACCOUNT_URL
          
                
            