--- 
jobs: 
  build: 
    docker: 
      - 
        image: "circleci/golang:latest"
    steps: 
      - checkout
      - 
        run: "go get -v -t -d ./..."
      - 
        run: "go build -v"
      - 
        run: "go test -v -race -cover ./..."
    working_directory: /go/src/github.com/servian/TechChallengeApp
  deploy: 
    docker: 
      - 
        image: "circleci/golang:latest"
    steps: 
      - checkout
      - 
        run: 
          command: |
              go get -v -t -d ./...
              mkdir output
              go build -v -o TechChallengeApp .
              ls
              ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile
          name: Setup
      - 
        run: 
          command: |
              if [ -d "dist" ]; then
                rm -rf dist
              fi
              
              mkdir -p dist
              
              go build -v -o TechChallengeApp .
              
              cp TechChallengeApp dist/
              cp -r assets dist/
              cp conf.toml dist/
              
              rm TechChallengeApp
              
              export version=$(cat versionfile)
              
              zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*
          environment: 
            GOARCH: amd64
            GOOS: linux
          name: "Build for linux"
      - 
        run: 
          command: |
              if [ -d "dist" ]; then
                rm -rf dist
              fi
              
              mkdir -p dist
              
              go build -v -o TechChallengeApp .
              
              cp TechChallengeApp dist/
              cp -r assets dist/
              cp conf.toml dist/
              
              rm TechChallengeApp
              
              export version=$(cat versionfile)
              
              zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*
          environment: 
            GOARCH: amd64
            GOOS: darwin
          name: "Build for macOS"
      - 
        run: 
          command: |
              # cross compile to windows in linux requires a few extra bits
              # this gets around permission issues
              sudo chmod -R 0777 /usr/local/go/
              go get github.com/inconshreveable/mousetrap
              if [ -d "dist" ]; then
                rm -rf dist
              fi
              
              mkdir -p dist
              
              go build -v -o TechChallengeApp.exe .
              
              cp TechChallengeApp.exe dist/
              cp -r assets dist/
              cp conf.toml dist/
              
              rm TechChallengeApp.exe
              
              export version=$(cat versionfile)
              
              zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*
          environment: 
            GOARCH: amd64
            GOOS: windows
          name: "Build Windows 64bit"
      - 
        run: 
          command: |
              if [ -d "dist" ]; then
                rm -rf dist
              fi
              
              mkdir -p dist
              
              go build -v -o TechChallengeApp.exe .
              
              cp TechChallengeApp.exe dist/
              cp -r assets dist/
              cp conf.toml dist/
              
              rm TechChallengeApp.exe
              
              export version=$(cat versionfile)
              
              zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*
          environment: 
            GOARCH: 386
            GOOS: windows
          name: "Build Windows 32bit"
      - 
        store_artifacts: 
          path: output
    working_directory: /go/src/github.com/servian/TechChallengeApp
orbs: 
  aws-ecr: circleci/aws-ecr@6.15.2
version: 2
workflows: 
  build_test_deploy: 
    jobs: 
      - build
      - 
        deploy: 
          filters: 
            branches: 
              only: master
            tags: 
              ignore: /.*/
          requires: 
            - build
      - 
        aws-ecr/build-and-push-image: 
          dockerfile: Dockerfile
          path: "."
          repo: techchallengeapp
          requires: 
            - deploy
          tag: "latest,v0.1.${CIRCLE_BUILD_NUM}"
  version: 2
